
std::string kernel_code = 
"void kernel kernel_matrix_convolution(global const bench_t* A,  global bench_t* B, global const bench_t* kernel_data, const int n, const int m, const int w, const int kernel_size, local bench_t* data, const int shared_size, const int kernel_rad){\n"
"int x = get_global_id(0);\n"
"int y = get_global_id(1);\n"
"unsigned int size = n;\n"
"int x0, y0;\n"
"bench_t sum = 0;\n"
"if (x < size && y < size){\n"
"//TOP right corner\n"
"x0 = x - kernel_rad;\n"
"y0 = y - kernel_rad;\n"
"if ( x0 < 0 || y0 < 0 )\n"
"{\n"
"data[get_local_id(0) * shared_size + get_local_id(1)] = 0;\n"
"}\n"
"else\n"
"{\n"
"data[get_local_id(0) * shared_size + get_local_id(1)] = A[x0 *size+y0];\n"
"}\n"
"//BOTTOM right corner\n"
"x0 = x + kernel_rad;\n"
"y0 = y - kernel_rad;\n"
"if ( x0 > size-1  || y0 < 0 )\n"
"{\n"
"data[(get_local_id(0) + kernel_rad * 2) * shared_size + get_local_id(1)] = 0;\n"
"}\n"
"else\n"
"{\n"
"data[(get_local_id(0) + kernel_rad * 2) * shared_size + get_local_id(1)] = A[x0 *size+y0];\n"
"}\n"
"//TOP left corner\n"
"x0 = x - kernel_rad;\n"
"y0 = y + kernel_rad;\n"
"if ( x0 < 0  || y0 > size-1 )\n"
"{\n"
"data[get_local_id(0) * shared_size + (get_local_id(1) + kernel_rad * 2)] = 0;\n"
"}\n"
"else\n"
"{\n"
"data[get_local_id(0) * shared_size + (get_local_id(1) + kernel_rad * 2)] = A[x0 *size+y0];\n"
"}\n"
"//BOTTOM left corner\n"
"x0 = x + kernel_rad;\n"
"y0 = y + kernel_rad;\n"
"if ( x0 > size-1  || y0 > size-1 )\n"
"{\n"
"data[(get_local_id(0) + kernel_rad * 2) * shared_size + (get_local_id(1) + kernel_rad * 2)] = 0;\n"
"}\n"
"else\n"
"{\n"
"data[(get_local_id(0) + kernel_rad * 2) * shared_size + (get_local_id(1) + kernel_rad * 2)] = A[x0 *size+y0];\n"
"}\n"
"barrier(CLK_LOCAL_MEM_FENCE);\n"
"unsigned int xa = kernel_rad + get_local_id(0);\n"
"unsigned int ya = kernel_rad + get_local_id(1);\n"
"for(int i = -kernel_rad; i <= kernel_rad; ++i)\n"
"{\n"
"for(int j = -kernel_rad; j <= kernel_rad; ++j)\n"
"{\n"
"sum += data[(xa + i) * shared_size +  (ya + j)] * kernel_data[(i+kernel_rad)* kernel_size + (j+kernel_rad)];\n"
"}\n"
"}\n"
"B[x*size+y ] = sum;\n"
"}\n"
"}\n"
;
