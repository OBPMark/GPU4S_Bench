
std::string kernel_code = 
"void kernel wavelet_transform_low(global const bench_t *A, global bench_t *B, const int n){\n"
"int i = get_global_id(0);\n"
"unsigned int size = n;\n"
"if (i < size){\n"
"bench_t sum_value_low = 0;\n"
"if(i == 0){\n"
"sum_value_low = A[0] - (int)(- (B[size]/2.0) + (1.0/2.0));\n"
"}\n"
"else\n"
"{\n"
"sum_value_low = A[2*i] - (int)( - (( B[i + size -1] +  B[i + size])/ 4.0) + (1.0/2.0) );\n"
"}\n"
"B[i] = sum_value_low;\n"
"}\n"
"}\n"
"void kernel wavelet_transform(global const bench_t *A, global bench_t *B, const int n){\n"
"int i = get_global_id(0);\n"
"unsigned int size = n;\n"
"if (i < size){\n"
"bench_t sum_value_high = 0;\n"
"// specific cases\n"
"if(i == 0){\n"
"sum_value_high = A[1] - (int)( ((9.0/16.0) * (A[0] + A[2])) - ((1.0/16.0) * (A[2] + A[4])) + (1.0/2.0));\n"
"}\n"
"else if(i == size -2){\n"
"sum_value_high = A[2*size - 3] - (int)( ((9.0/16.0) * (A[2*size -4] + A[2*size -2])) - ((1.0/16.0) * (A[2*size - 6] + A[2*size - 2])) + (1.0/2.0));\n"
"}\n"
"else if(i == size - 1){\n"
"sum_value_high = A[2*size - 1] - (int)( ((9.0/8.0) * (A[2*size -2])) -  ((1.0/8.0) * (A[2*size - 4])) + (1.0/2.0));\n"
"}\n"
"else{\n"
"// generic case\n"
"sum_value_high = A[2*i+1] - (int)( ((9.0/16.0) * (A[2*i] + A[2*i+2])) - ((1.0/16.0) * (A[2*i - 2] + A[2*i + 4])) + (1.0/2.0));\n"
"}\n"
"//store\n"
"B[i+size] = sum_value_high;\n"
"}\n"
"}\n"
;
