#htvar kernel_code
void kernel kernel_matrix_convolution_old(global const bench_t* A,  global bench_t* B, global const bench_t* kernel_data, const int n, const int m, const int w, const int kernel_size, const int offset ){  
               int x = get_global_id(0);                                                                                                                                                                                                   
               int y = get_global_id(1);                                                                                                                                                                                                   
               global bench_t* A_aux;                                
               global bench_t* B_aux;                                 
       unsigned int size = n;                                                                                                                                                          
       int kernel_rad = kernel_size / 2;                                                                                                                                               
       bench_t sum = 0;                                                                                                                                                                
                                                                                                                                                                                       
if (x < size && y < size){                                                                                                                                                                                                                 
             A_aux = A + offset;                                                          
             B_aux = B + offset;                                                          
               for(int i = -kernel_rad; i <= kernel_rad; ++i) // loop over kernel_rad  -1 to 1 in kernel_size 3                                                                                                    
                       {                                                                                                                                                                                                                   
                                for(int j = -kernel_rad; j <= kernel_rad; ++j)                                                                                                                                             
                            {                                                                                                                                                                                                
                                bench_t value = 0;                                                                                                                                                                                 
                    if (i + x < 0 || j + y < 0)                                                                                                                                        
                    {                                                                                                                                                                  
                       value = 0;                                                                                                                                                      
                    }                                                                                                                                                                  
                    else if ( i + x > size - 1 || j + y > size - 1)                                                                                                                    
                    {                                                                                                                                                                  
                        value = 0;                                                                                                                                                     
                    }                                                                                                                                                                  
                    else                                                                                                                                                               
                    {                                                                                                                                                                  
                       value = A_aux[(x + i)*size+(y + j)];                                                                                                                                
                    }                                                                                                                                                                  
                    sum += value * kernel_data[(i+kernel_rad)* kernel_size + (j+kernel_rad)];                                                                                          
                 }                                                                                                                                                                     
             }                                                                                                                                                                         
           B_aux[x*size+y ] = sum;                                                                                                                                                         
                                                                                                                                                                                                                                           
               }                                                                                                                                                                                                                     
                                                                                                                                                                                                                             
}                                                                                                                                                                                                                                                
void kernel kernel_matrix_convolution(global const bench_t* A,  global bench_t* B, global const bench_t* kernel_data, const int n, const int m, const int w, const int kernel_size, local bench_t* data, const int shared_size, const int kernel_rad, const int offset, const int out_offset){               
       int x = get_global_id(0);                                                                                                                                                                                                                                     
       int y = get_global_id(1);                                                                                                                                                                                                                                     
       global bench_t* A_aux;                 
       global bench_t* B_aux;            
       unsigned int size = n;                                                                                                                                                                                                                                        
       int x0, y0;                                                                                                                                                                                                                                                   
       bench_t sum = 0;                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                     
       if (x < size && y < size){                                                                                                                                                                                                                                    
                A_aux = A + offset;                         
                B_aux = B + out_offset;                                              
                //TOP right corner                                                                                                                                                                                                                                   
                x0 = x - kernel_rad;                                                                                                                                                                                                                                 
                y0 = y - kernel_rad;                                                                                                                                                                                                                                 
                if ( x0 < 0 || y0 < 0 )                                                                                                                                                                                                                              
                {                                                                                                                                                                                                                                                    
                    data[get_local_id(0) * shared_size + get_local_id(1)] = 0;                                                                                                                                                                                       
                }                                                                                                                                                                                                                                                    
                else                                                                                                                                                                                                                                                 
                {                                                                                                                                                                                                                                                    
                    data[get_local_id(0) * shared_size + get_local_id(1)] = A_aux[x0 *size+y0];                                                                                                                                                                          
                }                                                                                                                                                                                                                                                    
                //BOTTOM right corner                                                                                                                                                                                                                                
                x0 = x + kernel_rad;                                                                                                                                                                                                                                 
                y0 = y - kernel_rad;                                                                                                                                                                                                                                 
                if ( x0 > size-1  || y0 < 0 )                                                                                                                                                                                                                        
                {                                                                                                                                                                                                                                                    
                    data[(get_local_id(0) + kernel_rad * 2) * shared_size + get_local_id(1)] = 0;                                                                                                                                                                    
                }                                                                                                                                                                                                                                                    
                else                                                                                                                                                                                                                                                 
                {                                                                                                                                                                                                                                                    
                   data[(get_local_id(0) + kernel_rad * 2) * shared_size + get_local_id(1)] = A_aux[x0 *size+y0];                                                                                                                                                        
                }                                                                                                                                                                                                                                                    
                //TOP left corner                                                                                                                                                                                                                                    
                x0 = x - kernel_rad;                                                                                                                                                                                                                                 
                y0 = y + kernel_rad;                                                                                                                                                                                                                                 
                if ( x0 < 0  || y0 > size-1 )                                                                                                                                                                                                                        
                {                                                                                                                                                                                                                                                    
                   data[get_local_id(0) * shared_size + (get_local_id(1) + kernel_rad * 2)] = 0;                                                                                                                                                                     
                }                                                                                                                                                                                                                                                    
                else                                                                                                                                                                                                                                                 
                {                                                                                                                                                                                                                                                    
                   data[get_local_id(0) * shared_size + (get_local_id(1) + kernel_rad * 2)] = A_aux[x0 *size+y0];                                                                                                                                                        
                }                                                                                                                                                                                                                                                    
                //BOTTOM left corner                                                                                                                                                                                                                                 
                x0 = x + kernel_rad;                                                                                                                                                                                                                                 
                y0 = y + kernel_rad;                                                                                                                                                                                                                                 
                if ( x0 > size-1  || y0 > size-1 )                                                                                                                                                                                                                   
                {                                                                                                                                                                                                                                                    
                   data[(get_local_id(0) + kernel_rad * 2) * shared_size + (get_local_id(1) + kernel_rad * 2)] = 0;                                                                                                                                                  
                }                                                                                                                                                                                                                                                    
                else                                                                                                                                                                                                                                                 
                {                                                                                                                                                                                                                                                    
                   data[(get_local_id(0) + kernel_rad * 2) * shared_size + (get_local_id(1) + kernel_rad * 2)] = A_aux[x0 *size+y0];                                                                                                                                     
                }                                                                                                                                                                                                                                                    
                barrier(CLK_LOCAL_MEM_FENCE);                                                                                                                                                                                                                        
                unsigned int xa = kernel_rad + get_local_id(0);                                                                                                                                                                                                      
                unsigned int ya = kernel_rad + get_local_id(1);                                                                                                                                                                                                      
                for(int i = -kernel_rad; i <= kernel_rad; ++i)                                                                                                                                                                                                       
                {                                                                                                                                                                                                                                                    
                   for(int j = -kernel_rad; j <= kernel_rad; ++j)                                                                                                                                                                                                    
                    {                                                                                                                                                                                                                                                
                        sum += data[(xa + i) * shared_size +  (ya + j)] * kernel_data[(i+kernel_rad)* kernel_size + (j+kernel_rad)];                                                                                                                                 
                    }                                                                                                                                                                                                                                                
                }                                                                                                                                                                                                                                                    
               B_aux[x*size+y ] = sum;                                                                                                                                                                                                                                   
       }                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                                     
}                                                                                                                                                                                                                                                                    
void kernel kernel_relu(global const bench_t* A, global bench_t* B, const int size, const int offset){                                                                                                                                                                                           
       int i = get_global_id(0);                                                                                                                                                                                                                                     
       global bench_t* A_aux;                        
       global bench_t* B_aux;                                                                                                                                                                                                                                                              
       if (i < (size * size) ){                                                                                                                                                                                                                                      
           bench_t threshold = 0;                                                                                                                  
           A_aux = A + offset;                            
           B_aux = B + offset;                            
           B[i] = max(threshold, A[i]);                                                                                              
                                                                                                                                                   
                                                                                                            
                                                                                                                                                      
                                                                                                                               
       }                                                                                                                                              
                                                                                                                                                   
}                                                                                                                                                                                      
void kernel kernel_max(global const bench_t* A, global bench_t* B, const int size, const  int stride,  const  int lateral_stride, const int offset_input, const int offset_output ){                                                
               int i = get_global_id(0);                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                              
       global bench_t* A_aux;                               
       global bench_t* B_aux;                               
       if (i < lateral_stride*lateral_stride){                                                                                                                                                                                                                                              
          A_aux = A + offset_input;                                                     
          B_aux = B + offset_output;                                                     
          bench_t max_value = A_aux[(i * stride + ((i/lateral_stride)*size))];                                                                                                                                          
          for(unsigned int x = 0; x < stride; ++x)                                                                                                                                                                                                                                        
          {                                                                                                                                                                                               
             for(unsigned int y = 0; y < stride; ++y)                                                                                                                                                                                                                                                        
             {                                                                                                                                                                    
               max_value = max(max_value, A_aux[((i * stride + ((i/lateral_stride)*size)) + x)  + ( y * size)]);                                                                                                                                                                                                                                    
             }                                                                                                               
          }                                                                                                                   
          B_aux[i] = max_value;                                                                                                                    
                                                                                                                                                                                                                                                               
       }                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                       
}                                                                                                                                                                                                                                                                                                      
void kernel kernel_lrn(global const bench_t* A, global bench_t* B, const int size, const bench_t K, const bench_t ALPHA, const bench_t BETA, const int offset ){                       
       int i = get_global_id(0);                                                                                                                                                       
       int j = get_global_id(1);                                                                                                                                                       
       global bench_t* A_aux;                                
       global bench_t* B_aux;                                
       if (i < size && j < size){                                                                                                                                                      
           A_aux = A + offset;                            
           B_aux = B + offset;                                                                                                                                                                           
           B_aux[i*size+j] = A_aux[i*size+j]/pow((K+ALPHA*pow(A_aux[i*size+j],2)),BETA);                                                                                                           
                                                                                                                                                                                       
                                                                                                                                                                                        
                                                                                                                                                                                          
                                                                                                                                                                                       
       }                                                                                                                                                                               
                                                                                                                                                                                       
}                                                                                                                                                                                      
void kernel kernel_matrix_multiplication(global const bench_t* A, const global bench_t* B, global bench_t* C, const int n, const int m, const int w, const int offset_input, const int offset_output ){                                 
       int i = get_global_id(0);                                                                                                                                                       
       int j = get_global_id(1);                                                                                                                                                       
       global bench_t* B_aux;                        
       global bench_t* C_aux;                        
       if (i < n && j < m){                                                                                                                                                            
           B_aux = B + offset_input;                                            
           C_aux = C + offset_output;                                            
           bench_t acumulated = 0;                                                                                                                                                     
           for (unsigned int k_d = 0; k_d < w; ++k_d )                                                                                                                                 
               {                                                                                                                                                                       
                   acumulated += A[i*w+k_d] * B_aux[k_d*m +j];                                                                                                                              
               }                                                                                                                                                                       
               C_aux[i*m+j] =  acumulated;                                                                                                                                                 
       }                                                                                                                                                                               
                                                                                                                                                                                       
}                                                                                                                                                                                      
void kernel kernel_softmax(global const bench_t* A, global bench_t* B, global bench_t* sum_d_B, const int size, const int offset, const int offset_input, const int offset_sum ){                                      
               int i = get_global_id(0);                                                                                                                                                                                                                                       
               int tid = get_local_id(0);                                                                                                                                                                                                                               
               global bench_t* B_aux;          
               global bench_t* A_aux;                                
               global bench_t* sum_d_B_aux;                                
               bench_t value = 0;                                                                                                                                                         
               __local bench_t shared_data[BLOCK_SIZE];                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                       
               if (i < (size) ){                                                                                                                                                                                                                                              
                       B_aux = B + offset;                         
                       A_aux = A + offset_input;                                        
                       sum_d_B_aux = sum_d_B + offset_sum;                                        
                       value = exp(A_aux[i]);                                                                                                                                                                                                                                
                       B_aux[i] = value;                                                                                                                                                                                         
                       *sum_d_B_aux = 0;            
                                                                       
                       shared_data[tid] = value;                                                                                                                                                                                                                                             
                       barrier(CLK_LOCAL_MEM_FENCE);                                                                                                                                                                                                                                             
                                                                                                                      
                       for (unsigned int s=get_local_size(0)/2; s>0; s>>=1)                                                                                                                                                                                                                                             
                       {                                                                                                                                                                                                                                             
                          if (tid < s)                                                                                                                                                                                                                                              
                          {                                                                                                                                                                                                                                              
                            shared_data[tid] += shared_data[tid + s];                                                                                                                                                                                                                                            
                          }                                                                                                                                                                                                                                             
                       }                                                                                                                                                                                                                                                 
                       barrier(CLK_LOCAL_MEM_FENCE);                                                                                                                                                                                                                                                 
                       if (tid == 0)                                                                                                                                                                                                                                                 
                       {                                                                                                                                                                                                                                                 
                            atomic_add_global(sum_d_B_aux, shared_data[0]);                                                                                                                                                                                                                                            
                       }                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                               
               }                                                                                                                                                                                                                                                            
                                                                                                                                                                                                                                                       
}                                                                                                                                                                                                                                                                                                      
void kernel kernel_softmax_end(global  bench_t* B, global bench_t* sum_d_B, const int size, const int offset, const int offset_sum){                                              
       int i = get_global_id(0);                                                                                                                   
       global bench_t* B_aux;                                                                                                                     
        global bench_t* sum_d_B_aux;                       
       if (i < (size) ){                                                                                                                      
           B_aux = B + offset;                                                                                                                   
           sum_d_B_aux = sum_d_B + offset_sum;                                    
           B_aux[i] = (B_aux[i]/(*sum_d_B_aux));                                                                                              
                                                                                                                                                   
                                                                                                            
                                                                                                                                                      
                                                                                                                               
       }                                                                                                                                              
                                                                                                                                                   
}
#htendvar