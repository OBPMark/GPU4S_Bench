
std::string kernel_code = 
"void kernel kernel_matrix_multiplication(global const bench_t* A, const global bench_t* B, global bench_t* C, const int n, const int m, const int w,const int BLOCK_SIZE){\n"
"__local bench_t A_tile[16*16];\n"
"__local bench_t B_tile[16*16];\n"
"unsigned int i = get_group_id(0) * BLOCK_SIZE + get_local_id(0);\n"
"unsigned int j = get_group_id(1) * BLOCK_SIZE + get_local_id(1);\n"
"unsigned int theadx = get_local_id(0);\n"
"unsigned int theady = get_local_id(1);\n"
"bench_t acumulated = 0;\n"
"unsigned int idx = 0;\n"
"for (unsigned int sub = 0; sub < get_num_groups(0); ++sub)\n"
"{\n"
"idx = i * n + sub * BLOCK_SIZE + theady;\n"
"if(idx >= m*n)\n"
"{\n"
"A_tile[theadx * BLOCK_SIZE+ theady] = 0;\n"
"}\n"
"else\n"
"{\n"
"A_tile[theadx * BLOCK_SIZE + theady] = A[idx];\n"
"}\n"
"idx = (sub * BLOCK_SIZE + theadx) * w + j;\n"
"if (idx >= m*w)\n"
"{\n"
"B_tile[theadx * BLOCK_SIZE +  theady] = 0;\n"
"}\n"
"else\n"
"{\n"
"B_tile[theadx* BLOCK_SIZE + theady] = B[idx];\n"
"}\n"
"barrier(CLK_LOCAL_MEM_FENCE);\n"
"for (unsigned int k = 0; k < BLOCK_SIZE; ++k)\n"
"{\n"
"acumulated +=  A_tile[theadx*BLOCK_SIZE + k] * B_tile[k*BLOCK_SIZE + theady];\n"
"}\n"
"barrier(CLK_LOCAL_MEM_FENCE);\n"
"}\n"
"if (i < n && j < w)\n"
"{\n"
"C[i *n + j] = acumulated;\n"
"}\n"
"}\n"
;
